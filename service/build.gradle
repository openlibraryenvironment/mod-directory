buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://maven.k-int.com/content/repositories/releases" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.7"
        classpath 'org.grails.plugins:database-migration:3.0.4'
        classpath "com.bmuschko:gradle-docker-plugin:3.2.1"
        classpath "com.k_int.gradle:kint-gradle-plugin:1.0.1"
    }
}

final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+\.\d+))?$/
version "${appVersion}"
group "org.olf"

apply plugin:"eclipse"
apply plugin:"idea"
// apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin:"com.bmuschko.docker-remote-api"
apply plugin: "com.k_int.gradle.plugin"

eclipse {
  classpath {
    file {
      whenMerged {
        def confEntries = (entries.findAll { it.path == 'grails-app/conf' }) as List
        
        if (confEntries) {
          def singleEnty = confEntries[0]
          
          // Remove all the entries.
          entries.removeAll ( confEntries )
          
          // Set the output directory, and re-add.
          singleEnty.output = "bin/main"
          entries << singleEnty
        }
      }
    }
  }
}

repositories {
  mavenLocal()
  maven { url 'http://maven.k-int.com/content/repositories/releases' }
  maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-undertow"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.16.Final"
  compile "org.grails.plugins:views-json"

  // non-graphql dependency
  compile 'org.olf.reshare.dm.directory:dm-directory:1.1.17'



  // compile "org.grails.plugins:views-json-templates"
  console "org.grails:grails-console"
  profile "org.grails.profiles:rest-api"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  
  
  runtime "com.zaxxer:HikariCP:3.2.0"
//  runtime "com.h2database:h2"
//  runtime "org.apache.tomcat:tomcat-jdbc"
  
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails:grails-datastore-rest-client"
  testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb:1.1.2"
  testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

  // Custom non profile deps.
  compile 'com.k_int.grails:web-toolkit:4.3.0'
  compile 'com.k_int.okapi:grails-okapi:3.7.0'
  compile 'org.apache.kafka:kafka-clients:2.3.0'

  compile "org.postgresql:postgresql:42.2.4"

  runtime "org.grails.plugins:async"
  runtime "org.grails.plugins:events"

  compile "org.grails.plugins:spring-security-core:3.2.0"
  compile 'org.grails.plugins:database-migration:3.0.4'
  compile 'org.liquibase:liquibase-core:3.5.5'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

  
  // Better test reports.
  testCompile( 'com.athaydes:spock-reports:1.6.1' ) {
    transitive = false // this avoids affecting your version of Groovy/Spock
  }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

jar {
  version "${version.replaceAll(version_regex, '$2')}"
}

springBoot {

  // Enable the creation of a fully
  // executable archive file.
  executable = true
}


buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')
  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.testVersion', it[5])
      }
    }
    version.replaceAll(/^(((\d+)\.\d+)\.\d+)(-([\w]+))?$/ , '$1')
  }

  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors

/**
 * Docker build config.
 */
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
  dockerTag = "${project.dockerRepo}/${project.name}:${project.version}${dockerTagSuffix}"
  dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
  description = 'Copy files to build directory'
  group = 'Docker'

  from project.jar

  // from otherfileLoc

  into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
  description = 'Create a Dockerfile file'
  group = 'Docker'

  destFile = project.file("${dockerBuildDir}/Dockerfile")

  from 'folioci/openjdk8-jre-alpine:latest'
  maintainer 'Knowledge Integration'

  exposePort 8080

  // Copying straight into the default directory should be enough
  copyFile jar.archiveName, '/usr/verticles/application.jar'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
  description = 'Create Docker image to run the Grails application'
  group = 'Docker'

  inputDir = file(dockerBuildDir)
  tag = dockerTag
}


